<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="7bacdc30-67bb-4b8d-805c-fc12b89ccbe6" activeEnvironment="Default" name="Edge Controller REST Test" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="f4cdb9a8-2fa7-4172-8fb4-d685c70b3327" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://192.168.178.43:5000" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:endpoint>http://dbrintzi.remote.csb:8089/</con:endpoint></con:endpoints><con:resource name="" path="" id="3df3101d-49c7-4c00-b196-1b374a043b28"><con:settings/><con:parameters/><con:resource name="forward" path="/forward/{length_in_cm}" id="08af99c3-d3e7-414f-a0be-aa002f932075"><con:settings/><con:parameters><con:parameter><con:name>length_in_cm</con:name><con:value>100</con:value><con:style>TEMPLATE</con:style><con:default>100</con:default></con:parameter></con:parameters><con:method name="Method 1" id="b65bf177-1901-46ed-8728-fe35f246b7ac" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="73481a73-8dcf-4983-9e5c-18278e8ba093" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/forward/20</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="length_in_cm" value="30" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>length_in_cm</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="backward" path="/backward/{length_in_cm}" id="3870fb1c-bf64-461f-9c19-c6b50ed799ba"><con:settings/><con:parameters><con:parameter><con:name>length_in_cm</con:name><con:value>100</con:value><con:style>TEMPLATE</con:style><con:default>100</con:default></con:parameter></con:parameters><con:method name="Method 1" id="ed18a5c9-0776-41d1-9357-96d659b24046" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="e31d550e-56f5-43d8-8007-016437515651" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="length_in_cm" value="100" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>length_in_cm</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="left" path="/left/{degrees}" id="5f66ea89-2822-4813-be16-7d9668b206bd"><con:settings/><con:parameters><con:parameter><con:name>degrees</con:name><con:value>180</con:value><con:style>TEMPLATE</con:style><con:default>180</con:default></con:parameter></con:parameters><con:method name="Method 1" id="6616180b-ded3-4893-8053-83be0119f998" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="f657ac5f-8a5f-4937-8433-c5368a151bc2" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="degrees" value="180" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>degrees</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="right" path="/right/{degrees}" id="b4b9317b-a39f-4653-8661-dce13fb88d12"><con:settings/><con:parameters><con:parameter><con:name>degrees</con:name><con:value>180</con:value><con:style>TEMPLATE</con:style><con:default>180</con:default></con:parameter></con:parameters><con:method name="Method 1" id="5e8d96be-f415-4d86-a177-8146624b818b" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="0e054af7-2ce7-46f7-9ce2-ffff76aec093" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="degrees" value="180" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>degrees</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="reset" path="/reset" id="26372266-1736-4e75-9819-4f75ff654a7f"><con:settings/><con:parameters/><con:method name="Method 1" id="c898bdd2-767f-4d42-ad8d-a0f6a32a4c8f" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="cf9822d8-4005-4ea1-9637-7dc9aee8b618" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/reset</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="distance" path="/distance" id="39284eb1-1942-4948-a2e0-66fc9c10da25"><con:settings/><con:parameters/><con:method name="Method 1" id="434ed17a-3e21-4890-8c5d-7d07fa6cecbe" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="05e3c6e1-1418-4c4f-a3d0-ec7f79f32a45" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="power" path="/power" id="464fe7d0-b1c6-482e-991d-21cb11e9433d"><con:settings/><con:parameters/><con:method name="Method 1" id="a447626c-4278-4739-afdd-099f4384cd2f" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="42dcb095-7cb4-4f64-aa8b-61324325cab2" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="1214529d-9a9a-41cc-b814-8da0d9fecc0e" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="1df4cfc8-3e64-4ec2-ba57-c5c29ba4799e" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.178.43:5000</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="58098b47-c0a2-4aa0-b330-a7b5db40794a" name="Edge_Controller_TestSuite"><con:description>TestSuite generated for REST Service [http://192.168.178.43:5000]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0dfd534a-dce8-4ad4-9aee-5f0d25f4f8ed" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="http://192.168.178.43:5000 TestSuite" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="" id="35ceec88-1d89-4572-99b4-042874524ab0"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="" id="1df4cfc8-3e64-4ec2-ba57-c5c29ba4799e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="forward" id="0f798d96-ddba-42f0-912e-1f9f0f1b00b2"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/forward/{length_in_cm}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="forward" id="73481a73-8dcf-4983-9e5c-18278e8ba093" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/forward/100</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="length_in_cm" value="100" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>length_in_cm</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="backward" id="c18881ab-ee56-49d1-9ff8-9188896de373"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/backward/{length_in_cm}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="backward" id="e31d550e-56f5-43d8-8007-016437515651" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/backward/100</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="length_in_cm" value="100" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>length_in_cm</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="left" id="a8e233ce-d47a-4244-90fc-2dd2483eeb6c"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/left/{degrees}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="left" id="f657ac5f-8a5f-4937-8433-c5368a151bc2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/left/180</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="degrees" value="180" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>degrees</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="right" id="c81d988c-591d-40b5-839d-e2a9ef561db3"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/right/{degrees}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="right" id="0e054af7-2ce7-46f7-9ce2-ffff76aec093" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/right/180</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="degrees" value="180" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>degrees</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="reset" id="76865bcc-c268-4f87-88f0-8acf13a4bfb5"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/reset" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="reset" id="cf9822d8-4005-4ea1-9637-7dc9aee8b618" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/reset</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="distance" id="8e0a1f1d-4743-459b-a483-7b73279360cd"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/distance" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="distance" id="05e3c6e1-1418-4c4f-a3d0-ec7f79f32a45" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/distance</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="power" id="7f5cb964-f9be-4dc8-98a4-3f8dde17e20c"><con:settings/><con:config service="http://192.168.178.43:5000" resourcePath="/power" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="power" id="42dcb095-7cb4-4f64-aa8b-61324325cab2" mediaType="application/json"><con:settings/><con:endpoint>http://192.168.8.104:5000</con:endpoint><con:request/><con:originalUri>http://192.168.8.104/power</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="aee0a4d0-67a0-4afd-9fd6-12b7c2666a1c" port="8089" path="/" host="dbrintzi.remote.csb" name="Edge Controller REST MockService"><con:settings/><con:properties/><con:restMockAction name="" method="GET" resourcePath="" id="a63928f2-1ae3-46e6-a65b-13b7733cc9ba"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1716d390-d634-4555-833c-9ff2c27c4a80" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>OK</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/forward/100" method="POST" resourcePath="/forward/100" id="3c132951-f6bd-4eae-9d5a-1d264a69d372"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8c8d1fb4-2d53-4771-a9cd-3456693f2207" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>OK</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/backward/100" method="POST" resourcePath="/backward/100" id="1d34d04e-bf86-42c4-be63-b29455dfacdc"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="109a7bb9-e626-481c-be97-36db671b4bd7" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>OK</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/left/180" method="POST" resourcePath="/left/180" id="f9b47ed7-a27b-4016-baf2-b2bfe4ad97b7"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ca2608d5-8e6d-4b20-acc8-61dd14cedde8" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>OK</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/right/180" method="POST" resourcePath="/right/180" id="7c55c25d-e636-4232-8392-89e8783ff360"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="9cfb95f8-6323-487e-904b-7b58ccb95965" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>OK</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/reset" method="POST" resourcePath="/reset" id="9aaa25bc-1b7e-4bb5-8533-048305c181c1"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6c6ee123-2ba7-4991-b15d-d30879765b2d" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>OK</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/distance" method="GET" resourcePath="/distance" id="e054107a-38f3-40c8-a3fb-eea3b57aceca"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e431c910-1af2-457c-9783-e4b5fe99f736" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>100</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/power" method="GET" resourcePath="/power" id="452a87d3-5da2-45f5-8359-69fe5c1df54e"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="45a5db52-efb2-45a6-b62a-d71f7c74a293" httpResponseStatus="200" mediaType=""><con:settings/><con:responseContent>100</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>